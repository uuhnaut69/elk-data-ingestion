input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgres:5432/postgres"
        jdbc_user => "postgres"
        jdbc_password => "postgres"
        jdbc_validate_connection => true
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.3.1.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        schedule => "*/30 * * * * *"
        statement => "select b.book_id as book_id, b.isbn as isbn, b.title as title, b.publication_date as publication_date, b.rating as rating, b.created_at as created_at, b.deleted_at as deleted_at, p.publisher_id as publisher_id, p.name as publisher_name, a.author_id as author_id, a.full_name as full_name, c.category_id as category_id, c.name as category_name from book b join publisher p on b.publisher_id = p.publisher_id left join book_author ba on b.book_id = ba.book_id left join author a on ba.author_id = a.author_id left join book_category bc on b.book_id = bc.book_id left join category c on bc.category_id = c.category_id"
    }
}

filter {
  aggregate {
    task_id => "%{book_id}"
    code => "
        map['book_id'] = event.get('book_id')
        map['isbn'] = event.get('isbn')
        map['title'] = event.get('title')
        map['publication_date'] = event.get('publication_date')
        map['rating'] = event.get('rating')
        map['created_at'] = event.get('created_at')
        map['deleted_at'] = event.get('deleted_at')

        map['publisher'] = {
            'id' => event.get('publisher_id'),
            'name' => event.get('publisher_name')
        }

        map['author_list'] ||= []
        map['authors'] ||= []

        if (event.get('author_id') != nil)
            if !(map['author_list'].include? event.get('author_id'))
                map['author_list'] << event.get('author_id')
                map['authors'] << {'id' => event.get('author_id'), 'full_name' => event.get('full_name')}
            end
        end

        map['category_list'] ||= []
        map['categories'] ||= []

        if (event.get('category_id') != nil)
            if !(map['category_list'].include? event.get('category_id'))
                map['category_list'] << event.get('category_id')
                map['categories'] << {'id' => event.get('category_id'), 'name' => event.get('category_name')}
            end
        end

        event.cancel()"
    push_previous_map_as_event => true
    timeout => 5
  }
  mutate { remove_field => [ "author_list", "category_list" ] }
}

output {
    stdout {
        codec => rubydebug
    }
    elasticsearch {
        hosts => "elasticsearch:9200"
        user => "elastic"
        password => "testpwd123"
        data_stream => "false"
        index => "books"
        document_id => "%{book_id}"
        doc_as_upsert => true
    }
}